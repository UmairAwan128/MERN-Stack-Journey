import React, { Component } from "react"; //type imrc tab
//the problem was we don,t have a single source of truth in our application as we reset or assign 0 to
// to the state of the Counters.jsx and is also assigned to 'value' property of the <counter> tag in but
// that don,t reach and change the state count prop here in the state so solution is to remove the
// complete state or only count property from the state of counter.jsx
//as state deleted so now counter.jsx will be called as controlled component
//as all its value depends on the props pass to it by counters.jsx or any other using its <counter> tag
//also this component will now don,t have any events that will also be removed from here and moved
//to Counters.jsx as that contains the state so handleIncrement() is removed from here

//for detailed code and many more see the counterOldWithState file

class Counter extends Component {
  //type cc tab to create class with render()

  //called when a component is updated so we get here get prevState,prevProps i.e old value
  //it can be used to do ajax call based on changes of the state or prop value e.g updating counter
  //value get more products from DB

  componentDidUpdate(prevProps, prevState) {
    console.log("Prev Props", prevProps);
    console.log("Prev State", prevState);
    //if counter value is changed
    if (prevProps.counter.value !== this.props.counter.value) {
      //ajax call to get new data from server
    }
  }

  componentWillUnmount() {
    //if we want to do something onDelete of the specific component do here
    console.log("Component - Unmount");
  }

  styles = {
    //creating styles for html tag for reuseablity in this property
    // now where on which tag we call this styles property these styles will be applied on that
    fontSize: 15, //format should be in camel case value will be auto converted to 10px
    fontWeight: "bold"
  };
  render() {
    console.log("Counter-Rendered");
    return (
      <div className="row">
        <div className="col-1">
          {/*  this.styles called the styles object*/}
          <span style={this.styles} className={this.getBadgeClasses()}>
            {this.formatCount()}
          </span>
        </div>
        <div className="col">
          <button
            //now as the method for increment is moved to Counters.jsx so called that method as we called
            //for Delete but we passsed it the whole counter object inspite of this very counter id
            //as we know to identify the counter in which we want to increment and also
            //as we did this for our ease also the counter object has the id so better will be passing counter obj
            onClick={() => this.props.onIncrement(this.props.counter)}
            style={{ fontSize: 20 }}
            className="btn btn-secondary btn-sm"
          >
            +
          </button>
          <button
            //now as the method for increment is moved to Counters.jsx so called that method as we called
            //for Delete but we passsed it the whole counter object inspite of this very counter id
            //as we know to identify the counter in which we want to increment and also
            //as we did this for our ease also the counter object has the id so better will be passing counter obj
            onClick={() => this.props.onDecrement(this.props.counter)}
            style={{ fontSize: 20 }}
            className="btn btn-secondary btn-sm m-2"
            disabled={this.props.counter.value <= 0 ? true : false}
          >
            -
          </button>
          {/* here is the delete button which will delete the specific <counter> component from 
         the list of all counters so we will use here onClick method and call a funcion to delete
         that spefic counter the bu we know that all the list of counters are in Counters.jsx(component) satate
         and we know that the state of any component is private cannot be accessed outside the component
         i.e here Counters.jsx so solution is we define the method there to delete the component as
         the method will be in that file so it will be able to mak changes to the state i.e remove the counter we clicked
         so we created a method there and passed its ref in the property named onDelete which we accessed here to get
         method ref and bind that method to the click of this component <counter> */}
          <button
            style={{ fontSize: 20 }}
            onClick={() => this.props.onDelete(this.props.counter.id)}
            className="btn btn-danger btn-sm"
          >
            Delete
          </button>{" "}
        </div>
      </div>
    );
  }

  //this method was auto generated by first lining the inner lines the selecting both and rightClick -> Refactor
  // which will move this code to a auto created method and we can also enter its name the method while creation
  getBadgeClasses() {
    let classes = "badge m-2 badge-";
    classes += this.props.counter.value === 0 ? "warning" : "primary"; //either will be appeneded end of classes var
    return classes;
  }

  formatCount() {
    const { value } = this.props.counter; //to get the reference of the value property of state
    // of counters.jsx
    return value === 0 ? "Zero" : value;
  }
}

export default Counter;

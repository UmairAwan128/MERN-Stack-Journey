// for details or comments or basic see indexWithoutValidation.js

const mongoose = require("mongoose");
mongoose
  .connect("mongodb://localhost/mongoDB-Demo")
  .then(() => console.log("Connected to MongoDB..."))
  .catch(error => console.log("Failed to connect to MongoDB", error));

//follwing is scheema we created but in this scheema
//bydefault all the properties that we define here are optional so if we avoid
//passing any value or try to create a empty record/document we will not get any error
//so one slution for this is make the fields required as we did to "name" so now name is
//required if we create a document/record without name we will ge a rejected promise.
const courseSchema = new mongoose.Schema({
  //  required, minlength,enum,min,max are builtin validators of mongoose for validating data before saving in DB
  name: {
    type: String,
    required: true,
    minlength: 5,
    maxlength: 255
    //match: /forRegularExpersionE.g for CNIC /
  },
  category: {
    type: String,
    //use enum if you want that value of property should be from a list specific characters
    enum: ["web", "mobile", "network"],
    required: true,
    //to convert the input from user to lower case then save to database
    lowercase: true,
    //to remove whitespaces from the input provided by user
    trim: true
  },
  author: String,
  //sometimes builtin validation don,t give our required validation e.g here we need
  //that user should pass atleast one tag in tags array if we use here required and user
  //send empty array it will save that not generate error we here we need to buid a coustom validator for us
  //for this we use "validate" property which has two attributes  "validator" which takes function()
  // as value that returns boolean and "message" which will be return if validation fails/ our validtor function() returns false.
  tags: {
    type: Array,

    // validate: {
    //   validator: function(value) {
    //     //if value/array has value i.e to avoid null value and has more then 0 indexes/tags return true
    //     return value && value.length > 0;
    //   },
    //   message: "A Course should have at least one tag."
    // }

    //or if validation involves reading something from DB or from Http service so we need async method for this so
    //inside validate:___   first use "isAsync:true" and validator: function() will be callback method so
    //one thing that we just created here a callback async method by following its syntax but it will be auto called by Mongoose
    validate: {
      isAsync: true,
      validator: function(value, callback) {
        //do some async work so we are using setTimeout() for demonstrating
        setTimeout(() => {
          //e.g say we get value from server/DB/HTTP service
          const result = value && value.length > 0;
          //so to return value i.e bool from validator validation success or not using callback()
          callback(result);
        }, 4000);
      },
      message: "A Course should have at least one tag."
    }
  },
  date: { type: Date, default: Date.now },
  isPublished: Boolean,
  //we want the price to be required only if the course is Published or isPublished=true so we can use
  //"required" is a builtin validator which takes either boolean/function that returns boolean so we can use it
  // here we cannot use arrow function ()=>{} but only simple function
  price: {
    type: Number,
    min: 10,
    max: 200,
    required: function() {
      return this.isPublished;
    },
    //we can use set ptoperty as setter to apply some operation on value provided by user e.g Round() the value 9.8 to 10 then store
    set: value => Math.round(value),
    //we can use get ptoperty as getter to apply some operation on value we get from DB e.g Round() the value stored in double(9.8) to int(10)
    get: value => Math.round(value)
  }
});
//unlike other noSQL databases like MSSQl in which we define rules/types of columns/attributes
//in databaseManagementStidio where we create DB,tables and assign each its property attrbutes like
//required,its type so there validation errors like "required/type" are generated by database
//but in MongoDB we don,t have such things we define a scheema here in file assign here attributes
//name,type and required so validation errors are generated by "mongoose" package or node depending upon scheema.
//so we can say that when we create a course each is validated by this scheema so it can even
//change before creating a new record/document.

//so the above validation is like Database its not the api validation where we can apply JOI
// or client side validation those all are seperate we can mantain three layers of validation
// to makesure we are saving correct data.
const Course = mongoose.model("Course", courseSchema);

createCourse();

async function createCourse() {
  const course = new Course({
    name: "Xamarine",
    author: "Umair",
    tags: ["mobile"],
    isPublished: true,
    category: " Mobile ",
    price: 15.6
  });

  //bydefault all the properties that we define in scheema are optional so if we avoid passing any
  //we will not get any error but now in scheema we made "name" property required so
  //  now if we create a document/record without name we will ge a rejected
  // promise/exception so to handle that we used here try catch().
  try {
    const result = await course.save();
    // on course.save() mongoDB automatically calls the builtin validate() of mongoDB
    //which validates the data according to scheema if not raise an exception we can also call it as
    // await course.validate()     but this method return nothing so no result to store.
    console.log(result);
  } catch (ex) {
    //console.log(ex.message);
    //in this "ex" we have a property "errors" and in this "errors" we have list of all properties like we have in
    // scheema each will have details of error so if any error found in that property. so here we can traverse each and use that property
    for (property in ex.errors) {
      //to show details of error(like stacktrace,propertyDetails,ValidValuesType) use
      console.log(ex.errors[property]);
      //to show only message
      //console.log(ex.errors[filed].message);
    }
  }
}

// for details or comments or basic see indexWithoutValidation.js
async function getCourses() {
  const courses = await Course.find({ author: "Mosh", isPublished: true })
    .limit(10)
    .sort({ name: 1 })
    .select({ name: 1, tags: 1 });
  console.log(courses);

  //   //For Better Filter or writting more complex queries we use "--Comparision Operator--" which are
  //  regExp and logical opertor see indexWithoutValidation.js
}

//getCoursesCount();

async function getCoursesCount() {
  const coursesCount = await Course.find({
    author: "Mosh",
    isPublished: true
  })
    .limit(10)
    .sort({ name: 1 })
    .count();
  console.log(coursesCount);
}

//getCoursesPagination();

async function getCoursesPagination() {
  const pageNumber = 2;
  const pageSize = 10;

  const courses = await Course.find({ author: "Mosh", isPublished: true })
    .skip((pageNumber - 1) * pageSize)
    .limit(pageSize)
    .sort({ name: 1 })
    .select({ name: 1, tags: 1 });
  console.log(courses);
}

//to update a specific course we have two approaches in MongoDB
// for details or comments or basic see indexWithoutValidation.js
//here we follow QueryFirst approach.
async function updateCourseQueryFirst(id) {
  const course = await Course.findById(id);
  if (!course) return;

  // //business Logic if course is not published return
  // if (!course.isPublished) return;

  course.isPublished = true;
  course.author = "new Author";
  const result = await course.save();
  console.log(result);
}

// //we get id from MongoDB compass for ease
// updateCourseQueryFirst("5cb20fa4105cf7297cbaf405");

// for details or comments or basic see indexWithoutValidation.js
//here we follow UpdateFirst approach.
async function updateCourse_UpdateFirst(id) {
  const updatedCourse = await Course.findByIdAndUpdate(
    id,
    {
      $set: {
        author: "Moss",
        isPublished: true
      }
    },
    { new: true }
  );
  console.log(updatedCourse);
}

//updateCourse_UpdateFirst("5cb20fa4105cf7297cbaf405");

//removeCourse("5cb20fa4105cf7297cbaf405");
// for details or comments or basic see indexWithoutValidation.js
async function removeCourse(id) {
  //if we want to get the document/record we deleted use findByIdAndRemove() pass it id not object
  const course = await Course.findByIdAndRemove(id);
  console.log(course);
}
